@if (Visible)
{
    <div class="tilediv" style=@($"flex: {Flex};")>
        <div class="closediv">
            <button class="btn btn-outline-light btn-sm" 
                @onclick=@(()=>{Visible=false;})>
                <img src="close.svg" />
            </button>
        </div>
        @ChildContent
    </div>
}

@code {
    [CascadingParameter]
    private CollapsibleTiles? Parent { get; set; } = null;

    /// <summary>
    /// Main axis flex settings for this flex-item. Has the
    /// same rules as flex-grow flex-shrink and flex-basis
    /// and only applies to the main axis. The cross axis is
    /// always set to align-items:stretch; so that everything
    /// is the same height (rows) or width (columns).
    /// </summary>
    [Parameter]
    public string Flex { get; set; } = "1 1 auto";

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if(Parent != null)
            Parent.AddTile(this);
        Visible = !InitiallyHidden; // Set initial visibility
    }

    public EventCallback<CollapsibleTile> VisibleChanged { get; set; }

    private bool visible = true;
    public bool Visible 
    {
        get => visible;
        set
        {
            if(visible != value)
            {
                visible = value;
                VisibleChanged.InvokeAsync(this);
            }
        }
    }

    [Parameter]
    public bool InitiallyHidden { get; set; } = false;

    [Parameter]
    public string Caption { get; set; } = string.Empty;
}
